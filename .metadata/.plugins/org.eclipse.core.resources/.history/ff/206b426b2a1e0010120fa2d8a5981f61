package application;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import db.DB;
import db.DbIntegrityException;

public class Program {

	public static void main(String[] args) {
		try {
			inserirAluno("Davi Lucas", "2425006", "2004/04/22", "Engenharia da Computação");
			lerLivros();
			atualizarEstoqueLivro(1, 8); // Atualiza o livro de ID 10 para ter 12 unidades em estoque
			deletarAluno(9); // Deleta por Id
		} catch (ParseException e) {
			System.out.println("Erro ao converter a data: " + e.getMessage());
		} finally {
			DB.closeConnection();
		}
	}

	/*
	 * Inserção Banco de dados
	 */
	public static void inserirAluno(String nome, String matricula, String dataNascimento, String curso)
			throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		Connection conn = null;
		PreparedStatement st = null;
		
		System.out.println("==== INSERINDO NOVO ALUNO ====");

		try {
			conn = DB.getConnection(); /* Conecta ao BD */

			st = conn.prepareStatement(
					"INSERT INTO alunos " + "(nome_aluno, matricula, data_nascimento, curso) "
							+ "VALUES (?, ?, ?, ?)", /* Depois colocar o valor */
					Statement.RETURN_GENERATED_KEYS); /* Comando maior SQL */

			st.setString(1, nome);
			st.setString(2, matricula);
			st.setDate(3, new java.sql.Date(sdf.parse(dataNascimento).getTime()));
			st.setString(4, curso);

			int rowsAffected = st.executeUpdate(); /* Quantas linhas alteradas */

			if (rowsAffected > 0) {
				ResultSet rs = st.getGeneratedKeys();
				while (rs.next()) {
					int id = rs.getInt(1);
					System.out.println("Inserção realizada! Id = " + id);
				}
			} else {
				System.out.println("Nenhuma linha alterada!");
			}
			System.out.println(); //Quebra de linha
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DB.closeStatement(st);
		}
	}
	
	
	/*
	 * Código para Recuperar Dados (LER)
	 */
	public static void lerLivros() {
		// Conexão e consulta ao banco de dados
		Connection conn = null;
		Statement st = null; // Prepara consulta SQL
		ResultSet rs = null; // Retorna o resultado
		
		System.out.println("==== LISTANDO LIVROS ====");

		try {
			conn = DB.getConnection(); // Conecta ao BD

			st = conn.createStatement();

			rs = st.executeQuery("SELECT * FROM livros"); // Inserir o comando SQL
			
			System.out.print("Listagem concluída: ");
			while (rs.next()) { // Enquanto existir o próximo
				System.out.println(rs.getInt("Id_livro") + ", " + rs.getString("titulo"));
			}
			System.out.println(); //Quebra de linha
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DB.closeResultSet(rs);
			DB.closeStatement(st);
		}
	}

	/*
	 * Atualizar dados
	 */
	public static void atualizarEstoqueLivro(int idLivro, int novaQuantidade) {
		Connection conn = null;
		PreparedStatement st = null;
		
		System.out.println("==== ATUALIZANDO ESTOQUE DO LIVRO ====");

		try {
			conn = DB.getConnection();

			st = conn.prepareStatement(
					"" + "UPDATE livros " + "SET quantidade_estoque = ? " + "WHERE " + "(id_livro = ?)");

			st.setInt(1, novaQuantidade); // Novo valor para o estoque
			st.setInt(2, idLivro); // Id do livro que será atualizado

			int rowsAffected = st.executeUpdate();

			if (rowsAffected > 0) {
				System.out.println("Livro com ID " + idLivro + " atualizado com sucesso.");
			} else {
				System.out.println("Nenhum livro atualizado, ID informado não existe!");
			}
			System.out.println(); //Quebra de linha
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DB.closeStatement(st);
		}
	}

	/*
	 * Deletar dados
	 */
	public static void deletarAluno(int idAluno) {
		Connection conn = null;
		PreparedStatement st = null;
		
		System.out.println("==== DELETANDO ALUNO ====");

		try {
			conn = DB.getConnection();

			st = conn.prepareStatement("DELETE FROM alunos WHERE id_aluno = ?");
			st.setInt(1, idAluno);

			int rowsAffected = st.executeUpdate();

			if (rowsAffected > 0) {
				System.out.println("Aluno com ID " + idAluno + " deletado com sucesso.");
			} else {
				System.out.println("Nenhum aluno deletado, ID informado não existe!");
			}
			System.out.println(); //Quebra de linha
		} catch (SQLException e) {
			throw new DbIntegrityException("Erro ao tentar deletar o aluno: " + e.getMessage());
		} finally {
			DB.closeStatement(st);
		}
	}

}
