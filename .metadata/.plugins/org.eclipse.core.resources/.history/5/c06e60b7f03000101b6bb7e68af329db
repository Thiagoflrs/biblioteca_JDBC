package application;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.Scanner;

import dao.AlunoDAO;
import dao.EmprestimoDAO;
import dao.LivroDAO;
import model.Aluno;
import model.Livro;

public class Program {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("\n===== SISTEMA BIBLIOTECA =====");
            System.out.println("1 - Registrar Empréstimo");
            System.out.println("2 - Registrar Devolução");
            System.out.println("3 - Listar Alunos com Multa");
            System.out.println("4 - Listar Relatório de Empréstimos Concluídos");
            System.out.println("5 - Gerenciar Aluno");
            System.out.println("6 - Gerenciar Livro");
            System.out.println("0 - Sair");
            System.out.print("Escolha uma opção: ");
            opcao = sc.nextInt();

            try {
                switch (opcao) {
                    case 1:
                        registrarEmprestimo(sc);  // Opção para registrar empréstimo
                        break;

                    case 2:
                        registrarDevolucao(sc);  // Opção para registrar devolução
                        break;

                    case 3:
                        listarAlunosComMulta();  // Listar alunos com multa
                        break;
                        
                    case 4:
                        listarRelatorioEmprestimosConcluidos();  // Opção para listar empréstimos concluídos
                        break;

                    case 5:
                        crudAluno(sc);  // CRUD de Aluno
                        break;

                    case 6:
                        crudLivro(sc);  // CRUD de Livro
                        break;

                    case 0:
                        System.out.println("Saindo...");
                        break;

                    default:
                        System.out.println("Opção inválida.");
                }
            } catch (SQLException e) {
                System.out.println("Erro: " + e.getMessage());
            }
        } while (opcao != 0);

        sc.close();
    }
    
    public static void listarRelatorioEmprestimosConcluidos() throws SQLException {
        EmprestimoDAO.listarRelatorioEmprestimosConcluidos(); 
    }

    // Registrar Empréstimo
    public static void registrarEmprestimo(Scanner sc) throws SQLException {
        System.out.print("ID do Aluno: ");
        int idAluno = sc.nextInt();
        System.out.print("ID do Livro: ");
        int idLivro = sc.nextInt();
        EmprestimoDAO.registrarEmprestimo(idAluno, idLivro);
    }

    // Registrar Devolução
    public static void registrarDevolucao(Scanner sc) throws SQLException {
        System.out.print("ID do Empréstimo: ");
        int idEmprestimo = sc.nextInt();
        EmprestimoDAO.registrarDevolucao(idEmprestimo);
    }

    // Listar Alunos com Multa
    public static void listarAlunosComMulta() throws SQLException {
        EmprestimoDAO.listarAlunosComMulta();
    }

    // CRUD para Aluno
    public static void crudAluno(Scanner sc) throws SQLException {
        int opcaoAluno;
        do {
            System.out.println("\n===== CRUD ALUNO =====");
            System.out.println("1 - Inserir Aluno");
            System.out.println("2 - Listar Alunos");
            System.out.println("3 - Atualizar Aluno");
            System.out.println("4 - Deletar Aluno");
            System.out.println("0 - Voltar");
            System.out.print("Escolha uma opção: ");
            opcaoAluno = sc.nextInt();
            sc.nextLine();  // Limpar buffer

            switch (opcaoAluno) {
                case 1:
                    System.out.print("Nome do Aluno: ");
                    String nomeAluno = sc.nextLine();
                    System.out.print("Matrícula do Aluno: ");
                    String matriculaAluno = sc.nextLine();
                    System.out.print("Data de Nascimento (AAAA-MM-DD): ");
                    String dataNascimento = sc.nextLine();
                    System.out.print("Curso do Aluno: ");
                    String cursoAluno = sc.nextLine();

                    Aluno aluno = new Aluno(null, nomeAluno, matriculaAluno, LocalDate.parse(dataNascimento), cursoAluno);
                    AlunoDAO.inserir(aluno);
                    break;

                case 2:
                    List<Aluno> alunos = AlunoDAO.listarAlunos();
                    alunos.forEach(System.out::println);
                    break;

                case 3:
                    System.out.print("ID do Aluno a ser atualizado: ");
                    int idAlunoAtualizar = sc.nextInt();
                    sc.nextLine(); // Limpar buffer
                    System.out.print("Novo Nome: ");
                    String novoNome = sc.nextLine();
                    System.out.print("Nova Matrícula: ");
                    String novaMatricula = sc.nextLine();
                    System.out.print("Nova Data de Nascimento (AAAA-MM-DD): ");
                    String novaDataNascimento = sc.nextLine();
                    System.out.print("Novo Curso: ");
                    String novoCurso = sc.nextLine();

                    Aluno alunoAtualizado = new Aluno(idAlunoAtualizar, novoNome, novaMatricula, LocalDate.parse(novaDataNascimento), novoCurso);
                    AlunoDAO.atualizarAluno(alunoAtualizado);
                    break;

                case 4:
                    System.out.print("ID do Aluno a ser deletado: ");
                    int idDeletarAluno = sc.nextInt();
                    AlunoDAO.deletarPorId(idDeletarAluno);
                    break;

                case 0:
                    System.out.println("Voltando...");
                    break;

                default:
                    System.out.println("Opção inválida.");
            }
        } while (opcaoAluno != 0);
    }

    // CRUD para Livro
    public static void crudLivro(Scanner sc) throws SQLException {
        int opcaoLivro;
        do {
            System.out.println("\n===== CRUD LIVRO =====");
            System.out.println("1 - Inserir Livro");
            System.out.println("2 - Listar Livros");
            System.out.println("3 - Atualizar Livro");
            System.out.println("4 - Deletar Livro");
            System.out.println("0 - Voltar");
            System.out.print("Escolha uma opção: ");
            opcaoLivro = sc.nextInt();
            sc.nextLine();  // Limpar buffer

            switch (opcaoLivro) {
                case 1:
                    System.out.print("Título do Livro: ");
                    String tituloLivro = sc.nextLine();
                    System.out.print("Autor do Livro: ");
                    String autorLivro = sc.nextLine();
                    System.out.print("Ano de Publicação: ");
                    int anoPublicacao = sc.nextInt();
                    System.out.print("Quantidade em Estoque: ");
                    int quantidadeEstoque = sc.nextInt();
                    
                    Livro livro = new Livro(null, tituloLivro, autorLivro, anoPublicacao, quantidadeEstoque);
                    LivroDAO.inserir(livro);
                    break;

                case 2:
                    List<Livro> livros = LivroDAO.listarLivros();
                    livros.forEach(System.out::println);
                    break;

                case 3:
                    System.out.print("ID do Livro a ser atualizado: ");
                    int idLivroAtualizar = sc.nextInt();
                    sc.nextLine();  // Limpar buffer
                    System.out.print("Novo Título do Livro: ");
                    String novoTitulo = sc.nextLine();
                    System.out.print("Novo Autor: ");
                    String novoAutor = sc.nextLine();
                    System.out.print("Novo Ano de Publicação: ");
                    int novoAnoPublicacao = sc.nextInt();
                    System.out.print("Nova Quantidade de Estoque: ");
                    int novaQuantidadeEstoque = sc.nextInt();

                    // Criando o objeto Livro com as novas informações
                    Livro livroAtualizado = new Livro(idLivroAtualizar, novoTitulo, novoAutor, novoAnoPublicacao, novaQuantidadeEstoque);

                    // Atualizando o livro sem necessidade de try-catch
                    LivroDAO.atualizarLivro(livroAtualizado);
                    break;

                case 4:
                    System.out.print("ID do Livro a ser deletado: ");
                    int idDeletarLivro = sc.nextInt();
                    LivroDAO.deletarPorId(idDeletarLivro);
                    break;

                case 0:
                    System.out.println("Voltando...");
                    break;

                default:
                    System.out.println("Opção inválida.");
            }
        } while (opcaoLivro != 0);
    }
}
