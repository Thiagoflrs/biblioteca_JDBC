package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;

import db.DB;
import db.DbException;

public class EmprestimoDAO {

    public static void registrarEmprestimo(int idAluno, int idLivro) throws SQLException {
        Connection conn = null;
        PreparedStatement stVerifica = null;
        PreparedStatement stAtualiza = null;
        PreparedStatement stEmprestimo = null;
        ResultSet rs = null;

        try {
            conn = DB.getConnection();
            conn.setAutoCommit(false); // inicia transação manualmente

            // 1. Verifica se há estoque disponível
            String verificaEstoqueSQL = "SELECT quantidade_estoque FROM livros WHERE id_livro = ?";
            stVerifica = conn.prepareStatement(verificaEstoqueSQL);
            stVerifica.setInt(1, idLivro);
            rs = stVerifica.executeQuery();

            if (!rs.next()) {
                throw new DbException("Livro não encontrado.");
            }

            int estoque = rs.getInt("quantidade_estoque");

            if (estoque <= 0) {
                throw new DbException("Livro sem estoque disponível.");
            }

            // 2. Atualiza o estoque (subtrai 1)
            String atualizaEstoqueSQL = "UPDATE livros SET quantidade_estoque = quantidade_estoque - 1 WHERE id_livro = ?";
            stAtualiza = conn.prepareStatement(atualizaEstoqueSQL);
            stAtualiza.setInt(1, idLivro);
            stAtualiza.executeUpdate();

            // 3. Registra o empréstimo com data de devolução em 7 dias
            String emprestimoSQL = "INSERT INTO emprestimos (id_aluno, id_livro, data_devolucao) VALUES (?, ?, ?)";
            stEmprestimo = conn.prepareStatement(emprestimoSQL);
            stEmprestimo.setInt(1, idAluno);
            stEmprestimo.setInt(2, idLivro);
            stEmprestimo.setDate(3, Date.valueOf(LocalDate.now().plusDays(7)));
            stEmprestimo.executeUpdate();

            conn.commit(); // confirma a transação

            System.out.println("Empréstimo registrado com sucesso!");

        } catch (SQLException e) {
            if (conn != null) conn.rollback(); // desfaz alterações se ocorrer erro
            throw e;
        } finally {
            DB.closeResultSet(rs);
            DB.closeStatement(stVerifica);
            DB.closeStatement(stAtualiza);
            DB.closeStatement(stEmprestimo);
            DB.closeConnection(conn);
        }
    }
}
