package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Aluno;
import util.DB;
import util.DbIntegrityException;

public class AlunoDAO {
    /*
     * Inserção de dados (CREATE)
     */
    public static void inserir(Aluno aluno) {
        String sql = "INSERT INTO alunos (nome_aluno, matricula, data_nascimento, curso) VALUES (?, ?, ?, ?)";

        System.out.println("==== INSERINDO NOVO ALUNO ====");

        // try-with-resources: fecha conexão e statement automaticamente
        try (Connection conn = DB.getConnection();
             PreparedStatement st = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Define os parâmetros da consulta preparada
            st.setString(1, aluno.getNome());
            st.setString(2, aluno.getMatricula());
            st.setDate(3, Date.valueOf(aluno.getDataNascimento())); // converte LocalDate para java.sql.Date
            st.setString(4, aluno.getCurso());

            // Executa o comando de inserção
            int rowsAffected = st.executeUpdate();

            // Verifica se algum registro foi inserido
            if (rowsAffected > 0) {
                // Recupera e imprime a chave primária gerada (id)
                try (ResultSet rs = st.getGeneratedKeys()) {
                    while (rs.next()) {
                        System.out.println("Aluno inserido! Id = " + rs.getInt(1));
                    }
                }
            } else {
                System.out.println("Nenhuma linha inserida!");
            }

            System.out.println(); // Quebra de linha para melhorar a leitura no console

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*
     * Listar dados (READ)
     */
    public static List<Aluno> listarAlunos() {
        String sql = "SELECT * FROM alunos"; // Consulta SQL para selecionar todos os alunos
        List<Aluno> lista = new ArrayList<>(); // Lista que irá armazenar os alunos recuperados

        System.out.println("==== LISTANDO ALUNOS ====");

        // try-with-resources para garantir fechamento automático
        try (Connection conn = DB.getConnection();
             PreparedStatement st = conn.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {

            // Itera sobre o ResultSet e cria objetos Aluno
            while (rs.next()) {
                Aluno aluno = new Aluno();
                aluno.setId(rs.getInt("id_aluno")); // pega o id do banco
                aluno.setNome(rs.getString("nome_aluno"));
                aluno.setMatricula(rs.getString("matricula"));
                aluno.setDataNascimento(rs.getDate("data_nascimento").toLocalDate()); // converte Date para LocalDate
                aluno.setCurso(rs.getString("curso"));

                lista.add(aluno); // adiciona o aluno à lista
            }

            System.out.println("Listagem concluída: ");

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return lista; // retorna a lista com todos os alunos
    }

    /*
     * Atualizar dados (UPDATE)
     */
    public static void atualizarAluno(Aluno aluno) {
        String sql = "UPDATE alunos SET nome_aluno = ?, matricula = ?, data_nascimento = ?, curso = ? WHERE id_aluno = ?";
        System.out.println();
        System.out.println("==== ATUALIZANDO DADOS DO ALUNO ====");

        // Atualiza os dados do aluno com base no ID
        try (Connection conn = DB.getConnection();
             PreparedStatement st = conn.prepareStatement(sql)) {

            // Define os valores atualizados
            st.setString(1, aluno.getNome());
            st.setString(2, aluno.getMatricula());
            st.setDate(3, Date.valueOf(aluno.getDataNascimento()));
            st.setString(4, aluno.getCurso());
            st.setInt(5, aluno.getId()); // ID do aluno a ser atualizado

            int rowsAffected = st.executeUpdate(); // Executa a atualização

            // Verifica se algum registro foi atualizado
            if (rowsAffected > 0) {
                System.out.println("Aluno com ID " + aluno.getId() + " atualizado com sucesso.");
            } else {
                System.out.println("Nenhum aluno atualizado, ID informado não existe!");
            }

            System.out.println(); // Quebra de linha para melhorar a leitura no console

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*
     * Deletar dados (DELETE)
     */
    public static void deletarPorId(int idAluno) {
        String sql = "DELETE FROM alunos WHERE id_aluno = ?";

        System.out.println("==== DELETANDO ALUNO ====");

        // Deleta o aluno com base no ID
        try (Connection conn = DB.getConnection(); PreparedStatement st = conn.prepareStatement(sql)) {

            st.setInt(1, idAluno); // define o ID a ser deletado

            int rowsAffected = st.executeUpdate();

            // Verifica se o registro foi de fato deletado
            if (rowsAffected > 0) {
                System.out.println("Aluno com ID " + idAluno + " deletado com sucesso.");
            } else {
                System.out.println("Nenhum aluno deletado, ID informado não existe!");
            }


        } catch (SQLException e) {
            // Lança exceção customizada em caso de erro
            throw new DbIntegrityException("Erro ao tentar deletar o aluno: " + e.getMessage());
        }
    }
    
    /*
	 * Buscar aluno por ID
	 */
	public static Aluno buscarPorId(int idAluno) {
	    String sql = "SELECT * FROM alunos WHERE id_aluno = ?"; // Consulta SQL para selecionar o aluno pelo ID
	    Aluno aluno = null;

	    // Tenta realizar a consulta
	    try (Connection conn = DB.getConnection();
	         PreparedStatement st = conn.prepareStatement(sql)) {

	        st.setInt(1, idAluno); // Define o ID do aluno como parâmetro

	        try (ResultSet rs = st.executeQuery()) {
	            if (rs.next()) {
	                // Se encontrar um aluno, cria o objeto Aluno e preenche com os dados do banco
	                aluno = new Aluno();
	                aluno.setId(rs.getInt("id_aluno"));
	                aluno.setNome(rs.getString("nome_aluno"));
	                aluno.setMatricula(rs.getString("matricula"));
	                aluno.setDataNascimento(rs.getDate("data_nascimento").toLocalDate());
	                aluno.setCurso(rs.getString("curso"));
	            }
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return aluno; // Retorna o aluno encontrado ou null se não encontrar
	}
}
