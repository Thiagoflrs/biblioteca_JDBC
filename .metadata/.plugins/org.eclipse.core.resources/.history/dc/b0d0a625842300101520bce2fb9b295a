package application;

import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;

import dao.AlunoDAO;
import dao.LivroDAO;
import dao.EmprestimoDAO;
import model.Aluno;
import model.Livro;

public class Program {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("\n===== SISTEMA BIBLIOTECA =====");
            System.out.println("1 - Registrar Empréstimo");
            System.out.println("2 - Registrar Devolução");
            System.out.println("3 - Listar Alunos com Multa");
            System.out.println("4 - Cadastro Alunos");
            System.out.println("5 - Cadastro Livros");
            System.out.println("0 - Sair");
            System.out.print("Escolha uma opção: ");
            opcao = sc.nextInt();

            try {
                switch (opcao) {
                    case 1:
                        System.out.print("ID do Aluno: ");
                        int idAluno = sc.nextInt();
                        System.out.print("ID do Livro: ");
                        int idLivro = sc.nextInt();
                        EmprestimoDAO.registrarEmprestimo(idAluno, idLivro);
                        break;

                    case 2:
                        System.out.print("ID do Empréstimo: ");
                        int idEmprestimo = sc.nextInt();
                        EmprestimoDAO.registrarDevolucao(idEmprestimo);
                        break;

                    case 3:
                        EmprestimoDAO.listarAlunosComMulta();
                        break;

                    case 4:
                        menuAluno(sc);
                        break;

                    case 5:
                        menuLivro(sc);
                        break;

                    case 0:
                        System.out.println("Saindo...");
                        break;

                    default:
                        System.out.println("Opção inválida.");
                }
            } catch (SQLException e) {
                System.out.println("Erro: " + e.getMessage());
            }
        } while (opcao != 0);

        sc.close();
    }

    // Menu de CRUD para Alunos
    private static void menuAluno(Scanner sc) throws SQLException {
        int opcaoAluno;
        do {
            System.out.println("\n===== MENU ALUNO =====");
            System.out.println("1 - Inserir Aluno");
            System.out.println("2 - Listar Alunos");
            System.out.println("3 - Atualizar Aluno");
            System.out.println("4 - Deletar Aluno");
            System.out.println("0 - Voltar");
            System.out.print("Escolha uma opção: ");
            opcaoAluno = sc.nextInt();

            switch (opcaoAluno) {
                case 1:
                    System.out.print("Nome do Aluno: ");
                    sc.nextLine(); // limpar o buffer do scanner
                    String nome = sc.nextLine();
                    System.out.print("Matrícula: ");
                    String matricula = sc.nextLine();
                    System.out.print("Data de Nascimento (yyyy-mm-dd): ");
                    String dataNascimento = sc.nextLine();
                    System.out.print("Curso: ");
                    String curso = sc.nextLine();

                    Aluno aluno = new Aluno(nome, matricula, dataNascimento, curso);
                    AlunoDAO.inserir(aluno);
                    break;

                case 2:
                    List<Aluno> alunos = AlunoDAO.listarAlunos();
                    for (Aluno a : alunos) {
                        System.out.println(a);
                    }
                    break;

                case 3:
                    System.out.print("ID do Aluno para Atualizar: ");
                    int idAluno = sc.nextInt();
                    System.out.print("Novo Nome do Aluno: ");
                    sc.nextLine();  // limpar o buffer
                    String novoNome = sc.nextLine();
                    System.out.print("Nova Matrícula: ");
                    String novaMatricula = sc.nextLine();
                    System.out.print("Nova Data de Nascimento (yyyy-mm-dd): ");
                    String novaDataNascimento = sc.nextLine();
                    System.out.print("Novo Curso: ");
                    String novoCurso = sc.nextLine();

                    Aluno alunoAtualizado = new Aluno(idAluno, novoNome, novaMatricula, novaDataNascimento, novoCurso);
                    AlunoDAO.atualizarAluno(alunoAtualizado);
                    break;

                case 4:
                    System.out.print("ID do Aluno para Deletar: ");
                    int idDeletar = sc.nextInt();
                    AlunoDAO.deletarPorId(idDeletar);
                    break;

                case 0:
                    break;

                default:
                    System.out.println("Opção inválida.");
            }
        } while (opcaoAluno != 0);
    }

    // Menu de CRUD para Livros
    private static void menuLivro(Scanner sc) throws SQLException {
        int opcaoLivro;
        do {
            System.out.println("\n===== MENU LIVRO =====");
            System.out.println("1 - Inserir Livro");
            System.out.println("2 - Listar Livros");
            System.out.println("3 - Atualizar Estoque");
            System.out.println("4 - Deletar Livro");
            System.out.println("0 - Voltar");
            System.out.print("Escolha uma opção: ");
            opcaoLivro = sc.nextInt();

            switch (opcaoLivro) {
                case 1:
                    System.out.print("Título do Livro: ");
                    sc.nextLine(); // limpar o buffer do scanner
                    String titulo = sc.nextLine();
                    System.out.print("Autor: ");
                    String autor = sc.nextLine();
                    System.out.print("Ano de Publicação: ");
                    int anoPublicacao = sc.nextInt();
                    System.out.print("Quantidade em Estoque: ");
                    int quantidadeEstoque = sc.nextInt();

                    Livro livro = new Livro(titulo, autor, anoPublicacao, quantidadeEstoque);
                    LivroDAO.inserir(livro);
                    break;

                case 2:
                    List<Livro> livros = LivroDAO.listarLivros();
                    for (Livro l : livros) {
                        System.out.println(l);
                    }
                    break;

                case 3:
                    System.out.print("ID do Livro para Atualizar Estoque: ");
                    int idLivro = sc.nextInt();
                    System.out.print("Nova Quantidade de Estoque: ");
                    int novaQuantidade = sc.nextInt();
                    LivroDAO.atualizarEstoque(idLivro, novaQuantidade);
                    break;

                case 4:
                    System.out.print("ID do Livro para Deletar: ");
                    int idDeletarLivro = sc.nextInt();
                    LivroDAO.deletarPorId(idDeletarLivro);
                    break;

                case 0:
                    break;

                default:
                    System.out.println("Opção inválida.");
            }
        } while (opcaoLivro != 0);
    }
}
