package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import db.DB;
import entities.Livro;

public class LivroDAO {

	/*
	 * Inserção de livros (CREATE)
	 */
	public static void inserir(Livro livro) {
		Connection conn = null;
		PreparedStatement st = null;
		ResultSet rs = null;

		System.out.println("==== INSERINDO NOVO LIVRO ====");

		try {
			conn = DB.getConnection();
			st = conn.prepareStatement(
				"INSERT INTO livros " +
				"(titulo, autor, data_publicacao, quantidade_estoque)" +
				" VALUES (?, ?, ?, ?)",
				Statement.RETURN_GENERATED_KEYS
			);

			st.setString(1, livro.getTitulo());
			st.setString(2, livro.getAutor());
			st.setDate(3, Date.valueOf(livro.getDataPublicacao()));
			st.setInt(4, livro.getQuantidadeEstoque());

			int rowsAffected = st.executeUpdate();

			if (rowsAffected > 0) {
				rs = st.getGeneratedKeys();
				while (rs.next()) {
					System.out.println("Livro inserido! Id = " + rs.getInt(1));
				}
			} else {
				System.out.println("Nenhum livro inserido!");
			}

			System.out.println(); // Quebra de linha

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DB.closeResultSet(rs);
			DB.closeStatement(st);
			DB.closeConnection(conn); // Fecha a conexão com o BD
		}
	}

	/*
	 * Código para Recuperar Dados (READ)
	 */
	public static List<Livro> listarLivros() {
		// Conexão e consulta ao banco de dados
		Connection conn = null;
		PreparedStatement st = null; // Prepara consulta SQL
		ResultSet rs = null; // Retorna o resultado
		List<Livro> lista = new ArrayList<>();

		System.out.println("==== LISTANDO LIVROS ====");

		try {
			conn = DB.getConnection(); // Conecta ao BD
			st = conn.prepareStatement("SELECT * FROM livros");
			rs = st.executeQuery();

			System.out.println("Listagem concluída: ");
			while (rs.next()) {
				Livro livro = new Livro();
				livro.setId(rs.getInt("id_livro"));
				livro.setTitulo(rs.getString("titulo"));
				livro.setAutor(rs.getString("autor"));
				livro.setDataPublicacao(rs.getDate("data_publicacao").toLocalDate());
				livro.setQuantidadeEstoque(rs.getInt("quantidade_estoque"));

				lista.add(livro);
			}

			System.out.println("Listagem concluída.\n");

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DB.closeResultSet(rs);
			DB.closeStatement(st);
			DB.closeConnection(conn); // Fecha a conexão com o BD
		}
		return lista;
	}

	/*
	 * Atualizar dados (UPDATE)
	 */
	public static void atualizarEstoque(int idLivro, int novaQuantidade) {
		Connection conn = null;
		PreparedStatement st = null;

		System.out.println("==== ATUALIZANDO ESTOQUE DO LIVRO ====");

		try {
			conn = DB.getConnection();

			st = conn.prepareStatement(
				"UPDATE livros " +
				"SET quantidade_estoque = ? " +
				"WHERE (id_livro = ?)"
			);

			st.setInt(1, novaQuantidade); // Novo valor para o estoque
			st.setInt(2, idLivro); // Id do livro que será atualizado

			int rowsAffected = st.executeUpdate();

			if (rowsAffected > 0) {
				System.out.println("Livro com ID " + idLivro + " atualizado com sucesso.");
			} else {
				System.out.println("Nenhum livro atualizado, ID informado não existe!");
			}
			System.out.println(); // Quebra de linha

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DB.closeStatement(st);
			DB.closeConnection(conn); // Fecha a conexão com o BD
		}
	}
}
